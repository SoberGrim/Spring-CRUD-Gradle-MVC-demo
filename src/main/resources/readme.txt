реализовано нового:
*два вида авторизации, через /localhost/login обычным образом (туда кидает всех неавторизованных)
и через /localhost/admin/ - через basicAuth(). Второй вариант stateless, что означает, что такая авторизация сохранится после перезагрузки
сервера, или же подойдет к любой другой запущенной копии программы, даже запущенной на другом сервере. Это актуально для проектов, где один сервер
"не справится", а пользователя может рандомно кинуть на любой из задействованных серверов, или даже перекинуть с одного сервера на другой в процессе
работы. При нажатии "/logout" происходит разавторизация их обоих режимов одновременно, не смотря на то, что у basicAuth() механизм разавторизации
или перелогина явным образом не предусмотрен.

*авторизация по логину либо email.
*установка заголовка для всех статических ресурсов "кэшировать в течение 1 дня". Браузер повторно не запрашивает ни favicon, ни файлы с js скриптами,
вместо этого один раз загрузив дальше браузер берет эти файлы из кэша. (настроено в application.yml)
*кастомная страница при ошибках. Состоит из собственно страницы и мини-контроллера.
*обработка любого неправильного ввода из View на уровне контроллера, через BindingResult + @Validation + DTO.
В модель "неправильные данные", потенциально содержащие нехороший код, например с хакерскими sql кавычками и прочим не шлется.
Подход "отправлю ка я в базу (или модель) то что мне прислал хакер - если кританет - верну текст ошибки" не использован.
*использованы тернарные операторы в JavaScript
*обращение ко всем элементам HTML через JQuery, запросом
$('#myDiv').val('setText') или let value = $('#myDiv').val(); Так же много образцов работы с JavaScript и JQuery.

*добавлена иконка прогарммы :)